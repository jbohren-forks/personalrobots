Index: ode/src/quickstep.cpp
===================================================================
--- ode/src/quickstep.cpp	(revision 1684)
+++ ode/src/quickstep.cpp	(working copy)
@@ -63,6 +63,7 @@
 
 #define RANDOMLY_REORDER_CONSTRAINTS 1
 
+
 //****************************************************************************
 // special matrix multipliers
 
@@ -339,11 +340,20 @@
 
 #endif
 
+#undef JNORMALIZE_MASS
+#ifdef JNORMALIZE_MASS
 static void SOR_LCP (dxWorldProcessContext *context,
+  const int m, const int nb, dRealMutablePtr J, dRealMutablePtr Jorig, int *jb, dxBody * const *body,
+  dRealPtr invI, dRealMutablePtr lambda, dRealMutablePtr fc, dRealMutablePtr b,
+  dRealPtr lo, dRealPtr hi, dRealPtr cfm, const int *findex,
+  const dxQuickStepParameters *qs)
+#else
+static void SOR_LCP (dxWorldProcessContext *context,
   const int m, const int nb, dRealMutablePtr J, int *jb, dxBody * const *body,
   dRealPtr invI, dRealMutablePtr lambda, dRealMutablePtr fc, dRealMutablePtr b,
   dRealPtr lo, dRealPtr hi, dRealPtr cfm, const int *findex,
   const dxQuickStepParameters *qs)
+#endif
 {
 #ifdef WARM_STARTING
   {
@@ -357,7 +367,12 @@
 
   // precompute iMJ = inv(M)*J'
   dReal *iMJ = context->AllocateArray<dReal> (m*12);
+#undef JNORMALIZE_MASS
+#ifdef JNORMALIZE_MASS
+  compute_invM_JT (m,Jorig,iMJ,jb,body,invI);
+#else
   compute_invM_JT (m,J,iMJ,jb,body,invI);
+#endif
 
   // compute fc=(inv(M)*J')*lambda. we will incrementally maintain fc
   // as we change lambda.
@@ -430,6 +445,13 @@
   dReal *last_lambda = context->AllocateArray<dReal> (m);
 #endif
 
+#undef MONITOR
+#ifdef MONITOR
+        printf("checking convergence\n");
+        printf(" iter   rms    max    i_max  lambda    i_max_lambda    index   \n");
+        printf("-----------------------------------------------------------------------------------\n");
+#endif
+
   const int num_iterations = qs->num_iterations;
   for (int iteration=0; iteration < num_iterations; iteration++) {
 
@@ -471,6 +493,7 @@
     memcpy (last_lambda,lambda,m*sizeof(dReal));
 #endif
 #ifdef RANDOMLY_REORDER_CONSTRAINTS
+    //if (1) {
     if ((iteration & 7) == 0) {
       for (int i=1; i<m; i++) {
         int swapi = dRandInt(i+1);
@@ -481,6 +504,159 @@
     }
 #endif
 
+#undef USE_SSE
+#ifdef USE_SSE
+      typedef float v4sf __attribute__ ((mode(V4SF)));
+
+      v4sf v_fc41,v_fc42,v_J41,v_J42,v_iMJ41,v_iMJ42;
+      v4sf v_fc241,v_fc242,v_J241,v_J242,v_iMJ241,v_iMJ242;
+      float f_delta41[4],f_delta42[4];
+
+      v4sf v_delta;
+      float f_delta[4];
+
+      v4sf v_lo;
+      float f_lo[4];
+      v4sf v_hi;
+      float f_hi[4];
+      v4sf v_lambda;
+      float f_lambda[4];
+
+      for (int i=0; i<m; i++) {
+        // @@@ potential optimization: we could pre-sort J and iMJ, thereby
+        //     linearizing access to those arrays. hmmm, this does not seem
+        //     like a win, but we should think carefully about our memory
+        //     access pattern.
+
+        int index = order[i].index;
+
+        // set the limits for this constraint. 
+        // this is the place where the QuickStep method differs from the
+        // direct LCP solving method, since that method only performs this
+        // limit adjustment once per time step, whereas this method performs
+        // once per iteration per constraint row.
+        // the constraints are ordered so that all lambda[] values needed have
+        // already been computed.
+        dReal hi_act, lo_act;
+        if (findex[index] >= 0) {
+                if (dFabs(lambda[findex[index]])>0)
+                  hi_act = dFabs (hi[index] * lambda[findex[index]]);
+                else
+                  hi_act = 0;
+                lo_act = -hi_act;
+        } else {
+                hi_act = hi[index];
+                lo_act = lo[index];
+        }
+
+        dRealMutablePtr fc_ptr1;
+        dRealMutablePtr fc_ptr2;
+        dReal delta;
+        {
+          int b1 = jb[index*2];
+          int b2 = jb[index*2+1];
+          fc_ptr1 = fc + 6*b1;
+          fc_ptr2 = (b2 >= 0) ? fc + 6*b2 : NULL;
+        }
+
+        // @@@ potential optimization: SIMD-ize this and the b2 >= 0 case
+        v_fc41 = __builtin_ia32_loadups(&fc_ptr[0]);
+        v_fc42 = __builtin_ia32_loadups(&fc_ptr[2]);
+        v_J41 = __builtin_ia32_loadups(&J_ptr[0]);
+        v_J42 = __builtin_ia32_loadups(&J_ptr[2]);
+        __builtin_ia32_storeups(f_delta41,__builtin_ia32_mulps(v_fc41,v_J41));
+        __builtin_ia32_storeups(f_delta42,__builtin_ia32_mulps(v_fc42,v_J42));
+        delta -= (f_delta41[0]+f_delta41[1]+f_delta41[2]+f_delta41[3]+f_delta42[2]+f_delta42[3]);
+
+        // @@@ potential optimization: handle 1-body constraints in a separate
+        //     loop to avoid the cost of test & jump?
+        if (b2 >= 0) {
+                fc_ptr = fc + 6*b2;
+                v_fc241 = __builtin_ia32_loadups(&fc_ptr[0]);
+                v_fc242 = __builtin_ia32_loadups(&fc_ptr[2]);
+                v_J241 = __builtin_ia32_loadups(&J_ptr[6]);
+                v_J242 = __builtin_ia32_loadups(&J_ptr[8]);
+                __builtin_ia32_storeups(f_delta41,__builtin_ia32_mulps(v_fc241,v_J241));
+                __builtin_ia32_storeups(f_delta42,__builtin_ia32_mulps(v_fc242,v_J242));
+                delta -= (f_delta41[0]+f_delta41[1]+f_delta41[2]+f_delta41[3]+f_delta42[2]+f_delta42[3]);
+
+        }
+
+        // compute lambda and clamp it to [lo,hi].
+        // @@@ potential optimization: does SSE have clamping instructions
+        //     to save test+jump penalties here?
+
+        // assigning new lambda and clamping delta
+        // repeat values
+        f_delta[0] =f_delta[1] =f_delta[2] =f_delta[3] =delta;
+        f_lambda[0]=f_lambda[1]=f_lambda[2]=f_lambda[3]=lambda[index];
+
+        f_lo[0]    =f_lo[1]    =f_lo[2]    =f_lo[3]    =lo_act;
+        f_hi[0]    =f_hi[1]    =f_hi[2]    =f_hi[3]    =hi_act;
+
+        v_delta  = __builtin_ia32_loadups(&f_delta[0]);
+        v_lambda = __builtin_ia32_loadups(&f_lambda[0]);
+        v_lo     = __builtin_ia32_loadups(&f_lo[0]);
+        v_hi     = __builtin_ia32_loadups(&f_hi[0]);
+
+        // clamp and update lambda,delta
+        v_delta = __builtin_ia32_maxps(v_delta,__builtin_ia32_subps(v_lo,v_lambda));
+        v_delta = __builtin_ia32_minps(v_delta,__builtin_ia32_subps(v_hi,v_lambda));
+        v_lambda = __builtin_ia32_addps(v_lambda,v_delta);
+
+        __builtin_ia32_storeups(f_delta,v_delta);
+        delta = f_delta[0];
+
+        __builtin_ia32_storeups(f_lambda,v_lambda);
+        lambda[index] = f_lambda[0];
+
+        //@@@ a trick that may or may not help
+        //dReal ramp = (1-((dReal)(iteration+1)/(dReal)num_iterations));
+        //delta *= ramp;
+
+        // update fc.
+        // @@@ potential optimization: SIMD for this and the b2 >= 0 case
+        fc_ptr = fc + 6*b1;
+
+
+        //v_fc41 = __builtin_ia32_loadups(&fc_ptr[0]); // already loaded
+        //v_fc42 = __builtin_ia32_loadups(&fc_ptr[2]); // already loaded
+
+        v_iMJ41 = __builtin_ia32_loadups(&iMJ_ptr[0]);
+        v_iMJ42 = __builtin_ia32_loadups(&iMJ_ptr[2]);
+
+        v_fc41 = __builtin_ia32_addps(v_fc41,__builtin_ia32_mulps(v_delta,v_iMJ41));
+        v_fc42 = __builtin_ia32_addps(v_fc42,__builtin_ia32_mulps(v_delta,v_iMJ42));
+
+        __builtin_ia32_storeups(&fc_ptr[0],v_fc41);
+        __builtin_ia32_storeups(&fc_ptr[2],v_fc42);
+        
+        // @@@ potential optimization: handle 1-body constraints in a separate
+        //     loop to avoid the cost of test & jump?
+        if (b2 >= 0) {
+                fc_ptr = fc + 6*b2;
+
+                v_iMJ241 = __builtin_ia32_loadups(&iMJ_ptr[6]);
+                v_iMJ242 = __builtin_ia32_loadups(&iMJ_ptr[8]);
+
+                v_fc241 = __builtin_ia32_addps(v_fc241,__builtin_ia32_mulps(v_delta,v_iMJ241));
+                v_fc242 = __builtin_ia32_addps(v_fc242,__builtin_ia32_mulps(v_delta,v_iMJ242));
+
+                __builtin_ia32_storeups(&fc_ptr[0],v_fc241);
+                __builtin_ia32_storeups(&fc_ptr[2],v_fc242);
+
+        }
+      }
+#else
+
+#ifdef MONITOR
+    double rms_delta = 0;
+    double max_delta = 0;
+    int    i_max_delta = 0;
+    double max_lambda = 0;
+    int    i_max_lambda = 0;
+    int    index_max_lambda = 0;
+#endif
     for (int i=0; i<m; i++) {
       // @@@ potential optimization: we could pre-sort J and iMJ, thereby
       //     linearizing access to those arrays. hmmm, this does not seem
@@ -505,6 +681,24 @@
       {
         delta = b[index] - old_lambda*Ad[index];
 
+#ifdef MONITOR
+        /// checking convergence
+        //printf("index %5d lambda %10f\n",index,lambda[index]);
+        double tmp_delta = fabs(delta); //fabs(delta)/std::max(fabs(lambda[index]),0.0001);
+        rms_delta += tmp_delta;
+        if (max_delta < tmp_delta)
+        {
+            max_delta = tmp_delta;
+            i_max_delta = i;
+            max_lambda = lambda[index];
+            i_max_lambda = i;
+            index_max_lambda = index;
+        }
+
+#endif
+        //@@@ a trick that may or may not help
+        //dReal ramp = (1-((dReal)(iteration+1)/(dReal)num_iterations));
+        //delta *= ramp;
         dRealPtr J_ptr = J + index*12;
         // @@@ potential optimization: SIMD-ize this and the b2 >= 0 case
         delta -=fc_ptr1[0] * J_ptr[0] + fc_ptr1[1] * J_ptr[1] +
@@ -579,6 +773,10 @@
           fc_ptr2[5] += delta * iMJ_ptr[11];
         }
       }
+#ifdef MONITOR
+      printf("%5d %20f %20f %5d %20f %5d %5d\n",iteration,rms_delta,max_delta,i_max_delta,max_lambda,i_max_lambda,index_max_lambda);
+#endif
+#endif
     }
   }
 }
@@ -607,6 +805,14 @@
   // accumulator. I and invI are a vertical stack of 3x4 matrices, one per body.
   dReal *invI = context->AllocateArray<dReal> (3*4*nb);
 
+#undef DEBUG_MASS
+#ifdef DEBUG_MASS
+  dReal *tmpI = context->AllocateArray<dReal> (3*4*nb);
+  dReal *tmpM = context->AllocateArray<dReal> (1*4*nb);
+  dRealMutablePtr tmpI_ptr,tmpM_ptr;
+  tmpI_ptr = tmpI;
+  tmpM_ptr = tmpM;
+#endif
   {
     dReal *invIrow = invI;
     dxBody *const *const bodyend = body + nb;
@@ -617,6 +823,15 @@
       // compute inverse inertia tensor in global frame
       dMULTIPLY2_333 (tmp,b->invI,b->posr.R);
       dMULTIPLY0_333 (invIrow,b->posr.R,tmp);
+#ifdef DEBUG_MASS
+      memcpy (tmpI_ptr, b->mass.I,3*4*sizeof(dReal));
+      tmpI_ptr+=12;
+      tmpM_ptr[0] = b->mass.mass;
+      tmpM_ptr[1] = b->mass.c[0];
+      tmpM_ptr[2] = b->mass.c[1];
+      tmpM_ptr[3] = b->mass.c[2];
+      tmpM_ptr+=4;
+#endif
 
       if (b->flags & dxBodyGyroscopic) {
         dMatrix3 I;
@@ -629,7 +844,22 @@
       }
     }
   }
+#ifdef DEBUG_MASS
+  FILE* ftmpI = fopen("/tmp/tmpI.mat","a");
+  //std::cout << " tmpI " << tmpI << std::endl;
+  fprintf(ftmpI,"\n");
+  dPrintMatrix(tmpI,3*nb,4,"%10.4f",ftmpI);
+  fclose(ftmpI);
 
+  FILE* ftmpM = fopen("/tmp/tmpM.mat","a");
+  //std::cout << " tmpM " << tmpM << std::endl;
+  fprintf(ftmpM,"\n");
+  dPrintMatrix(tmpM,nb,4,"%10.4f",ftmpM);
+  fclose(ftmpM);
+#endif
+
+
+
   {
     // add the gravity force to all bodies
     // since gravity does normally have only one component it's more efficient
@@ -705,6 +935,76 @@
     mfb = mfbcurr;
   }
 
+#undef DEBUG_MATRICES
+#ifdef DEBUG_MATRICES
+  FILE* fJo = fopen("/tmp/Jo.mat","a");
+  //std::cout << " J " << J << std::endl;
+  fprintf(fJo,"\n");
+  dPrintMatrix(J,m,12,"%10.4f",fJo);
+  fclose(fJo);
+#endif
+
+#undef JSPLIT
+#ifdef JSPLIT
+  // options:
+  // split J, solve each block in parallel
+  // move J setup into SOR_LCP
+  // solve each of JinvMJT in thread groups
+#endif
+
+
+
+#undef JNORMALIZE
+#ifdef JNORMALIZE
+  // normalize J
+  for (i=0;i<m;i++) {
+    double sum=0;
+    //printf(" J = [");
+    for (j=0; j<12; j++) {
+      sum += J[i*12+j]*J[i*12+j];
+      //printf(" %f",J[i*12+j]);
+    }
+    sum = sqrt(sum);
+    //printf("]\nsum %f\n",sum);
+    if (sum != 0)
+    for (j=0; j<12; j++) {
+      J[i*12+j] =J[i*12+j]/sum;
+    }
+  }
+#endif
+
+#ifdef JNORMALIZE_MASS
+  // we need a copy of Jacobian for joint feedbacks
+  // because it gets destroyed by SOR solver
+  // instead of saving all Jacobian, we can save just rows
+  // for joints, that requested feedback (which is normaly much less)
+  dReal *Jorig = NULL;
+  if (mfb > 0) {
+    Jorig = (dReal*) ALLOCA (mfb*12*sizeof(dReal));
+    mfb = 0;
+    for (i=0; i<nj; i++)
+      if (joint[i]->feedback) {
+        memcpy(Jorig+mfb*12, J+ofs[i]*12, info[i].m*12*sizeof(dReal));
+        mfb += info[i].m;
+      }
+  }
+//#else
+  // we need a copy of Jacobian for joint feedbacks
+  // because it gets destroyed by SOR solver
+  // instead of saving all Jacobian, we can save just rows
+  // for joints, that requested feedback (which is normaly much less)
+  dReal *Jcopy = NULL;
+  if (mfb > 0) {
+    Jcopy = (dReal*) ALLOCA (mfb*12*sizeof(dReal));
+    mfb = 0;
+    for (i=0; i<nj; i++)
+      if (joint[i]->feedback) {
+        memcpy(Jcopy+mfb*12, J+ofs[i]*12, info[i].m*12*sizeof(dReal));
+        mfb += info[i].m;
+      }
+  }
+#endif
+
   // if there are constraints, compute the constraint force
   dReal *J = NULL;
   int *jb = NULL;
@@ -719,6 +1019,115 @@
       J = context->AllocateArray<dReal> (jelements);
       dSetZero (J,jelements);
 
+#undef JNORMALIZE_MASS2
+#ifdef JNORMALIZE_MASS2
+      // normalize J by smaller of two masses
+
+      // setup mass matrices for each constraint row
+      dReal minM; // minimum of masses from two joint bodies
+
+      dRealMutablePtr min_I_ptr;
+      dRealMutablePtr tmp_J_ptr = J;
+
+      for (i=0;i<m;i++) {
+        // for every constraint i,
+        //   find the corresponding mass matrices
+        //   find the smaller of the 2( or 1 ) mass matrices
+        int b1 = jb[i*2];
+        int b2 = jb[i*2+1];
+        min_I_ptr = body[b1]->mass.I;
+        minM = body[b1]->mass.mass;
+
+        if (b2 >= 0)
+        {
+          dRealMutablePtr tmp_I_ptr = body[b2]->mass.I;
+          dReal minD1 = std::min(std::min(dFabs(min_I_ptr[0]),dFabs(min_I_ptr[5])),dFabs(min_I_ptr[10])); //min of diagonals of b1
+          dReal minD2 = std::min(std::min(dFabs(tmp_I_ptr[0]),dFabs(tmp_I_ptr[5])),dFabs(tmp_I_ptr[10])); //min of diagonals of b2
+          if (minD1 > minD2)
+            min_I_ptr = body[b2]->mass.I;
+
+          minM = std::min(minM,body[b2]->mass.mass);
+        }
+        // scale J
+        for (j=0; j<3; j++) tmp_J_ptr[i*12+j] = minM*tmp_J_ptr[i*12+j];
+        dMULTIPLY0_331 (tmp_J_ptr+i*12+3, min_I_ptr, tmp_J_ptr+i*12+3);
+        if (b2 >= 0)
+        {
+          for (j=0; j<3; j++) tmp_J_ptr[i*12+j+6] = minM*tmp_J_ptr[i*12+j+6];
+          dMULTIPLY0_331 (tmp_J_ptr+i*12+9, min_I_ptr, tmp_J_ptr+i*12+9);
+        }
+        // scale c (rhs) as well
+
+      }
+
+      // make a copyt of J after mass normalizing
+      dReal *Jcopy = NULL;
+      if (mfb > 0) {
+        Jcopy = (dReal*) ALLOCA (mfb*12*sizeof(dReal));
+        mfb = 0;
+        for (i=0; i<nj; i++)
+          if (joint[i]->feedback) {
+            memcpy(Jcopy+mfb*12, J+ofs[i]*12, info[i].m*12*sizeof(dReal));
+            mfb += info[i].m;
+          }
+      }
+#endif
+#ifdef JNORMALIZE_MASS
+      // normalize J by smaller of two masses
+
+      // setup mass matrices for each constraint row
+      dReal minM,minM2; // minimum of masses from two joint bodies
+      dRealMutablePtr I1_ptr,I2_ptr;
+      dRealMutablePtr tmp_J_ptr = J;
+
+      for (i=0;i<m;i++) {
+        // for every constraint i,
+        //   find the corresponding mass matrices
+        //   find the smaller of the 2( or 1 ) mass matrices
+        int b1 = jb[i*2];
+        int b2 = jb[i*2+1];
+        I1_ptr = body[b1]->mass.I;
+        minM = std::min(body[b1]->mass.mass,std::min(std::min(dFabs(I1_ptr[0]),dFabs(I1_ptr[5])),dFabs(I1_ptr[10])));
+
+        if (b2 >= 0)
+        {
+          I2_ptr = body[b2]->mass.I;
+          minM2 = std::min(body[b2]->mass.mass,std::min(std::min(dFabs(I2_ptr[0]),dFabs(I2_ptr[5])),dFabs(I2_ptr[10])));
+          minM = std::min(minM,minM2);
+        }
+        // scale J
+        for (j=0; j<6; j++) tmp_J_ptr[i*12+j] = minM*tmp_J_ptr[i*12+j];
+        if (b2 >= 0)
+        {
+          for (j=0; j<6; j++) tmp_J_ptr[i*12+j+6] = minM*tmp_J_ptr[i*12+j+6];
+        }
+        // scale c (rhs) as well
+        c[i] = minM * c[i];
+
+      }
+
+      // make a copyt of J after mass normalizing
+      dReal *Jcopy = NULL;
+      if (mfb > 0) {
+        Jcopy = (dReal*) ALLOCA (mfb*12*sizeof(dReal));
+        mfb = 0;
+        for (i=0; i<nj; i++)
+          if (joint[i]->feedback) {
+            memcpy(Jcopy+mfb*12, J+ofs[i]*12, info[i].m*12*sizeof(dReal));
+            mfb += info[i].m;
+          }
+      }
+#endif
+
+#ifdef DEBUG_MATRICES
+      FILE* fJ = fopen("/tmp/J.mat","a");
+      //std::cout << " J " << J << std::endl;
+      fprintf(fJ,"\n");
+      dPrintMatrix(J,m,12,"%10.4f",fJ);
+      fclose(fJ);
+#endif
+
+
       // create a constraint equation right hand side vector `c', a constraint
       // force mixing vector `cfm', and LCP low and high bound vectors, and an
       // 'findex' vector.
@@ -807,6 +1216,51 @@
 
           ofsi += infom;
         }
+#undef DEBUG_JOINTS
+#ifdef DEBUG_JOINTS
+
+        {
+          IFTIMING (dTimerNow ("debug J"));
+
+          // do some printing for joints
+          dReal *tmpJointInfo = context->AllocateArray<dReal> (8*nj);
+          dRealMutablePtr tmp_Jinfo_ptr = tmpJointInfo;
+
+
+          int count=0;
+          const dJointWithInfo1 *jicurr = jointiinfos;
+          const dJointWithInfo1 *const jiend = jicurr + nj;
+          for (; jicurr != jiend; jicurr++) {
+
+            dxJoint *joint = jicurr->joint;
+
+            // for every constraint,
+            //   get the following information
+            //   type()   body1id body2id body1mass body2mass
+            tmp_Jinfo_ptr[8+0]   = count;
+            tmp_Jinfo_ptr[8+1]   = joint->node[0].body->tag;
+            tmp_Jinfo_ptr[8+2]   = joint->node[0].body->mass.mass;
+            if (joint->node[1].body)
+            {
+              tmp_Jinfo_ptr[8+3] = joint->node[1].body->tag;
+              tmp_Jinfo_ptr[8+4] = joint->node[1].body->mass.mass;
+            }
+            else
+            {
+              tmp_Jinfo_ptr[8+3] = -1;
+              tmp_Jinfo_ptr[8+4] = -1;
+            }
+            tmp_Jinfo_ptr[8+5]   = count*8;
+            tmp_Jinfo_ptr += 8;
+            count++;
+          }
+
+          FILE* fJointInfo = fopen("/tmp/JointInfo.mat","a");
+          fprintf(fJointInfo,"\n");
+          dPrintMatrix(tmpJointInfo,nj,8,"%15f",fJointInfo);
+          fclose(fJointInfo);
+        }
+#endif
       }
 
       {
@@ -874,8 +1328,71 @@
     }
 #endif
 
+
     dReal *cforce = context->AllocateArray<dReal> (nb*6);
 
+#ifdef DEBUG_MATRICES
+    std::cout << " m: total constraint dimention " << m
+              << " nb: number of bounded variables " << nb
+              << " nub: number of unbounded variables " << nb
+              << " jb: array of body numbers for each joint row " << jb
+              << " lo " << lo
+              << " hi " << hi
+              << " findex " << findex
+              << std::endl;
+
+    FILE* finvI = fopen("/tmp/invI.mat","a");
+    //std::cout << " invI " << invI << std::endl;
+    fprintf(finvI,"\n");
+    dPrintMatrix(invI,3*nb,4,"%10.4f",finvI);
+    fclose(finvI);
+
+    FILE* fc = fopen("/tmp/c.mat","a");
+    //std::cout << " c " << c << std::endl;
+    fprintf(fc,"\n");
+    dPrintMatrix(c,1,m,"%10.4f",fc);
+    fclose(fc);
+
+    FILE* flambda = fopen("/tmp/lambda.mat","a");
+    //std::cout << " lambda " << lambda << std::endl;
+    fprintf(flambda,"\n");
+    dPrintMatrix(lambda,1,m,"%10.4f",flambda);
+    fclose(flambda);
+
+    FILE* fcforce = fopen("/tmp/cforce.mat","a");
+    fprintf(fcforce,"\n");
+    //std::cout << " cforce " << cforce << std::endl;
+    dPrintMatrix(cforce,nb,6,"%10.4f",fcforce);
+    fclose(fcforce);
+
+    FILE* frhs = fopen("/tmp/rhs.mat","a");
+    //std::cout << " rhs " << rhs << std::endl;
+    fprintf(frhs,"\n");
+    dPrintMatrix(rhs,1,m,"%10.4f",frhs);
+    fclose(frhs);
+
+    // constraint forc mixing vector
+    FILE* flo = fopen("/tmp/lo.mat","a");
+    //std::cout << " lo " << lo << std::endl;
+    fprintf(flo,"\n");
+    dPrintMatrix(lo,1,m,"%10.4f",flo);
+    fclose(flo);
+
+    // constraint forc mixing vector
+    FILE* fhi = fopen("/tmp/hi.mat","a");
+    //std::cout << " hi " << hi << std::endl;
+    fprintf(fhi,"\n");
+    dPrintMatrix(hi,1,m,"%10.4f",fhi);
+    fclose(fhi);
+
+    // constraint forc mixing vector
+    FILE* fcfm = fopen("/tmp/cfm.mat","a");
+    //std::cout << " cfm " << cfm << std::endl;
+    fprintf(fcfm,"\n");
+    dPrintMatrix(cfm,1,m,"%10.4f",fcfm);
+    fclose(fcfm);
+#endif
+
     BEGIN_STATE_SAVE(context, lcpstate) {
       IFTIMING (dTimerNow ("solving LCP problem"));
       // solve the LCP problem and get lambda and invM*constraint_force
Index: ode/src/util.h
===================================================================
--- ode/src/util.h	(revision 1684)
+++ ode/src/util.h	(working copy)
@@ -23,6 +23,7 @@
 #ifndef _ODE_UTIL_H_
 #define _ODE_UTIL_H_
 
+#define SIZE_MAX ((size_t)(-1))
 #include "objects.h"
 
 
Index: ode/src/util.cpp
===================================================================
--- ode/src/util.cpp	(revision 1684)
+++ ode/src/util.cpp	(working copy)
@@ -24,6 +24,8 @@
 #include "objects.h"
 #include "joints/joint.h"
 #include "util.h"
+#include <boost/thread.hpp>
+#include <boost/bind.hpp>
 
 static void InternalFreeWorldProcessContext (dxWorldProcessContext *context);
 
@@ -534,6 +536,10 @@
   dxBody *const *bodystart = body;
   dxJoint *const *jointstart = joint;
 
+  std::cout << "number of islands: " << islandcount << std::endl;
+  boost::thread* island_threads[islandcount];
+
+  int thread_count = 0;
   int const *const sizesend = islandsizes + islandcount * sizeelements;
   for (int const *sizescurr = islandsizes; sizescurr != sizesend; sizescurr += sizeelements) {
     int bcount = sizescurr[0];
@@ -541,12 +547,20 @@
 
     BEGIN_STATE_SAVE(context, stepperstate) {
       // now do something with body and joint lists
-      stepper (context,world,bodystart,bcount,jointstart,jcount,stepsize);
+      //stepper (context,world,bodystart,bcount,jointstart,jcount,stepsize);
+      std::cout << "spawning island: " << thread_count << std::endl;
+      island_threads[thread_count] = new boost::thread( boost::bind( stepper, context,world,bodystart,bcount,jointstart,jcount,stepsize)  );
     } END_STATE_SAVE(context, stepperstate);
 
     bodystart += bcount;
     jointstart += jcount;
+
+    thread_count++;
   }
+  for (int j = 0 ; j < thread_count ; j++)
+    island_threads[j]->join();
+  for (int j = 0 ; j < thread_count ; j++)
+    delete island_threads[j];
 
   context->CleanupContext();
   dIASSERT(context->IsStructureValid());
