Index: tests/kinfamtest.cpp
===================================================================
--- tests/kinfamtest.cpp	(revision 30215)
+++ tests/kinfamtest.cpp	(working copy)
@@ -200,8 +200,11 @@
     CPPUNIT_ASSERT(tree1.addTree(tree2,"Tree2","Segment2"));
     cout<<tree1<<endl;
 
-    Chain extract_chain1 = tree1.getChain("Segment2", "Segment4");
-    Chain extract_chain2 = tree1.getChain("Segment4", "Segment2");
+    vector<string> links;
+    Chain extract_chain1;
+    CPPUNIT_ASSERT(tree1.getChain("Segment2", "Segment4", extract_chain1, links));
+    Chain extract_chain2; 
+    CPPUNIT_ASSERT(tree1.getChain("Segment4", "Segment2", extract_chain2, links));
     CPPUNIT_ASSERT(extract_chain1.getNrOfJoints()==extract_chain2.getNrOfJoints());
     CPPUNIT_ASSERT(extract_chain1.getNrOfSegments()==extract_chain2.getNrOfSegments());
     ChainFkSolverPos_recursive solver1(extract_chain1);
Index: src/tree.hpp
===================================================================
--- src/tree.hpp	(revision 30215)
+++ src/tree.hpp	(working copy)
@@ -154,10 +154,12 @@
          *
          * @param chain_root the name of the root segment of the chain
          * @param chain_tip the name of the tip segment of the chain
+         * @param chain the resulting chain
+         * @param links vector with the names of the links between chain_root and chain_tip
          *
-         * @return the chain form chain_root to chain_tip, copied from the tree
+         * @return success or failure
          */
-        Chain getChain(const std::string& chain_root, const std::string& chain_tip)const;
+      bool getChain(const std::string& chain_root, const std::string& chain_tip, Chain& chain, std::vector<std::string>& links)const;
 
 
         const SegmentMap& getSegments()const
Index: src/tree.cpp
===================================================================
--- src/tree.cpp	(revision 30215)
+++ src/tree.cpp	(working copy)
@@ -115,22 +115,20 @@
     return true;
 }
 
-Chain Tree::getChain(const std::string& chain_root, const std::string& chain_tip)const
+bool Tree::getChain(const std::string& chain_root, const std::string& chain_tip, Chain& chain, std::vector<std::string>& links)const
 {
-    Chain chain;
-
     // walk down from chain_root and chain_tip to the root of the tree
     vector<SegmentMap::key_type> parents_chain_root, parents_chain_tip;
     for (SegmentMap::const_iterator s=getSegment(chain_root); s!=segments.end(); s=s->second.parent){
         parents_chain_root.push_back(s->first);
         if (s->first == "root") break;
     }
-    if (parents_chain_root.empty() || parents_chain_root.back() != "root") return chain;
+    if (parents_chain_root.empty() || parents_chain_root.back() != "root") return false;
     for (SegmentMap::const_iterator s=getSegment(chain_tip); s!=segments.end(); s=s->second.parent){
         parents_chain_tip.push_back(s->first);
         if (s->first == "root") break;
     }
-    if (parents_chain_tip.empty() || parents_chain_tip.back()  != "root") return chain;
+    if (parents_chain_tip.empty() || parents_chain_tip.back()  != "root") return false;
 
     // remove common part of segment lists
     SegmentMap::key_type last_segment = "root";
@@ -144,6 +142,7 @@
 
 
     // add the segments from the root to the common frame
+    links.clear();
     for (unsigned int s=0; s<parents_chain_root.size()-1; s++){
         Segment seg = getSegment(parents_chain_root[s])->second.segment;
         Frame f_tip = seg.pose(0.0).Inverse();
@@ -153,13 +152,15 @@
         else if (jnt.getType() == Joint::TransX || jnt.getType() == Joint::TransY || jnt.getType() == Joint::TransZ || jnt.getType() == Joint::TransAxis)
             jnt = Joint(f_tip*jnt.JointOrigin(), f_tip.M*jnt.JointAxis(), Joint::TransAxis);
         chain.addSegment(Segment(jnt, f_tip, getSegment(parents_chain_root[s+1])->second.segment.getInertia()));
+        links.push_back(parents_chain_root[s+1]);
     }
 
     // add the segments from the common frame to the tip frame
-    for (int s=parents_chain_tip.size()-1; s>-1; s--)
+    for (int s=parents_chain_tip.size()-1; s>-1; s--){
         chain.addSegment(getSegment(parents_chain_tip[s])->second.segment);
-
-    return chain;
+        links.push_back(parents_chain_tip[s]);
+    }
+    return true;
 }
 
 }
