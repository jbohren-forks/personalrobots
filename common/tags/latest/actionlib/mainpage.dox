/**
\mainpage
\htmlinclude manifest.html

The \b actionlib package is meant to assist ROS users in writing nodes
that accomplish specific tasks. Examples of this include: moving the base
to a target location, taking a laser scan with parameters that are passed
in and returning the resulting point cloud, detecting the handle of a door,
etc. To accomplish these tasks, we introduce the notion of a goal that can
be sent to an action server by an action client. In the case of moving the
base, the goal would contain a PoseStamped message that contains information
about where the robot should move to in the world. Each goal sent to an action
server has an associated status.


\section protocol Communication Protocol
The 'action protocol' uses 6 custom messages and 1 predefined message per action. If we wanted to create an action called FooBar, we would generate the following messages
- FooActionGoal
- FooActionResult
- FooActionFeedback
- FooGoal
- FooResult
- FooFeedback

We need to add a lot more description here

The values for the status of a goal are as follows: 
- \b PENDING - The goal has yet to be processed by the action server
- \b ACTIVE - The goal is currently being processed by the action server
- \b REJECTED - The goal was rejected by the action server without being processed and without a request from the action client to cancel 
- \b SUCCEEDED - The goal was achieved successfully by the action server
- \b ABORTED - The goal was aborted by the action server
- \b PREEMPTING - Processing of the goal was canceled by either another goal, or a cancel request sent to the action server 
- \b PREEMPTED - The goal was preempted by either another goal, or a preempt message being sent to the action server
- \b RECALLING - The goal has not been processed and a cancel request has been received from the action client, but the action server has not confirmed the goal is canceled 
- \b RECALLED - The goal was canceled by either another goal, or a cancel request before the action server began processing the goal 
- \b LOST - The goal was sent by the ActionClient, but disappeared due to some communication error 

\section ActionClientAPI ActionClient Code API
These are the most relevant parts of the client side API
- \link actionlib::ActionClient ActionClient \endlink - The main class for using actions on the client side 
- \link actionlib::SimpleActionClient SimpleActionClient \endlink - A simple wrapper around the ActionClient
- \link actionlib::GoalHandle \endlink - Return by ActionClient on each dispacthed goal

The action client also defines several Enums to pass information to the user
- actionlib::CommState - Enum defining the communication states of a goal
- actionlib::SimpleGoalState - Enum with a simpler representation of
the communication state of the goal. Thus, a more coarse version of \link actionlib::CommState CommState \endlink
- actionlib::TerminalState - Enum defining the terminal states of a goal

\section ActionServerAPI ActionServer Code API

These are the most relevant parts of the server side API
- actionlib::ActionServer
- actionlib::SingleGoalActionServer

*/